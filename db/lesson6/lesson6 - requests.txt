Сконфигурировать мастер и слейв.
2. Попытаться воссоздать базу данных с городами в Монго. Найти, выбрать, обновить, удалить.
Конфиг мастера, конфиг слейва. Вывод команды Шов мастер статус шов слейв статус и ниже команды монго ДБ.

#1.1. Файл дополнительной конфигурации master-server.
# Файл находиться на master-server в каталоге /etc/mysql/conf.d/master.cnf

#########################################
[mysqld]

server-id = 1

log_bin = /var/log/mysql/bin.log

#binlog_ignore_db = sys, performance_schema, mysql

binlog_do_db = employees #база которая будет реплицироваться

#########################################

#1.2. Файл дополнительной конфигурации slave-server.
# Файл находиться на slave-server в каталоге /etc/mysql/conf.d/slave.cnf

#########################################

[mysqld]

server-id = 2

log_bin = bin.log

binlog_do_db = employees #база которая будет реплицироваться

relay_log = /var/log/mysql/relay.log

#########################################

#после изменения конфига перезапустить сервер командой
SERVICE MYSQL RESTART;

SHOW MASTER STATUS;
+------------+----------+--------------+------------------+-------------------+
| File       | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------+----------+--------------+------------------+-------------------+
| bin.000028 |      155 | employees    |                  |                   |
+------------+----------+--------------+------------------+-------------------+
1 row in set (0,00 sec)

#Выгружаем базу на master-server
mysqldump -u root -p123123 employees --routines > /var/17062019.sql
#Загружаем базу на slave-server
mysql -u root -p123123 employees --routines < /var/17062019.sql

#Работа с slave-server
mysql> STOP SLAVE;
Query OK, 0 rows affected, 1 warning (0,00 sec)

mysql> RESET SLAVE;
Query OK, 0 rows affected (0,00 sec)

mysql> CHANGE MASTER TO MASTER_HOST='192.168.0.41', MASTER_USER='root', MASTER_PASSWORD='123123', MASTER_LOG_FILE='bin.000028', MASTER_LOG_POS=155;
Query OK, 0 rows affected, 2 warnings (0,04 sec)

START SLAVE;

mysql> SHOW SLAVE STATUS \G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.0.41
                  Master_User: root
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: bin.000028
          Read_Master_Log_Pos: 155
               Relay_Log_File: relay.000002
                Relay_Log_Pos: 316
        Relay_Master_Log_File: bin.000028
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 155
              Relay_Log_Space: 514
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 1
                  Master_UUID: 3a90a3b6-f1ab-11e8-8365-080027ad0e39
             Master_Info_File: mysql.slave_master_info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Master_SSL_Crl:
           Master_SSL_Crlpath:
           Retrieved_Gtid_Set:
            Executed_Gtid_Set:
                Auto_Position: 0
         Replicate_Rewrite_DB:
                 Channel_Name:
           Master_TLS_Version:
       Master_public_key_path:
        Get_master_public_key: 0
1 row in set (0,00 sec)

#Выполним несколько запросов на master-server
mysql> USE employees;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> SELECT * FROM `shtat`;
+----+------------------+----------------------+------+------------------------+--------+
| id | name             | lastname             | dept | position               | salary |
+----+------------------+----------------------+------+------------------------+--------+
|  1 | Антон            | Полонников           |    1 | NULL                   |  45000 |
|  2 | Алена            | Звягинцева           |   10 | NULL                   |  35000 |
|  3 | Ирина            | Кенина               |    1 | NULL                   |  25000 |
|  5 | Анатолий         | Башлыков             |    1 | Программист            |  30000 |
|  6 | Владимир         | Питерский            |  777 | Главный                |  40000 |
| 17 | Анатолий         | Башлыков             |    1 | Программист            |  30000 |
| 18 | Анатолий         | Башлыков             |    1 | Программист            |  30000 |
| 19 | Анатолий         | Башлыков             |    1 | Программист            |  30000 |
+----+------------------+----------------------+------+------------------------+--------+
8 rows in set (0,00 sec)

mysql> INSERT INTO `shtat` (`name`, `lastname`, `dept`, `position`, `salary`) VALUES ('Севастьян', 'Егоркин', 777, 'Самый главный', 100000);

mysql> SELECT * FROM `shtat`;                                                                    
+----+--------------------+----------------------+------+---------------------------+--------+
| id | name               | lastname             | dept | position                  | salary |
+----+--------------------+----------------------+------+---------------------------+--------+
|  1 | Антон              | Полонников           |    1 | NULL                      |  45000 |
|  2 | Алена              | Звягинцева           |   10 | NULL                      |  35000 |
|  3 | Ирина              | Кенина               |    1 | NULL                      |  25000 |
|  5 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
|  6 | Владимир           | Питерский            |  777 | Главный                   |  40000 |
| 17 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
| 18 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
| 19 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
| 20 | Севастьян          | Егоркин              |  777 | Самый главный             | 100000 |
+----+--------------------+----------------------+------+---------------------------+--------+
9 rows in set (0,00 sec)


#То же самое мы видим на slave-server
mysql> mysql> SELECT * FROM `shtat`;
+----+--------------------+----------------------+------+---------------------------+--------+
| id | name               | lastname             | dept | position                  | salary |
+----+--------------------+----------------------+------+---------------------------+--------+
|  1 | Антон              | Полонников           |    1 | NULL                      |  45000 |
|  2 | Алена              | Звягинцева           |   10 | NULL                      |  35000 |
|  3 | Ирина              | Кенина               |    1 | NULL                      |  25000 |
|  5 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
|  6 | Владимир           | Питерский            |  777 | Главный                   |  40000 |
| 17 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
| 18 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
| 19 | Анатолий           | Башлыков             |    1 | Программист               |  30000 |
| 20 | Севастьян          | Егоркин              |  777 | Самый главный             | 100000 |
+----+--------------------+----------------------+------+---------------------------+--------+
9 rows in set (0,00 sec)

mysql> SHOW SLAVE STATUS \G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.0.41
                  Master_User: root
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: bin.000028
          Read_Master_Log_Pos: 628
               Relay_Log_File: relay.000002
                Relay_Log_Pos: 789
        Relay_Master_Log_File: bin.000028
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 628
              Relay_Log_Space: 987
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 1
                  Master_UUID: 3a90a3b6-f1ab-11e8-8365-080027ad0e39
             Master_Info_File: mysql.slave_master_info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Master_SSL_Crl:
           Master_SSL_Crlpath:
           Retrieved_Gtid_Set:
            Executed_Gtid_Set:
                Auto_Position: 0
         Replicate_Rewrite_DB:
                 Channel_Name:
           Master_TLS_Version:
       Master_public_key_path:
        Get_master_public_key: 0
1 row in set (0,00 sec)



#Работа с MongoDB
#Загрузим на сервер нашу базу данных из 3 урока:
#(Перенесем базы при помощи FileZila в папку /var) и загрузим их

geodata__cities.sql
geodata__countries.sql
geodata__regions.sql

root@MySQL8:~# mysql -u root -p123123  geodata < /var/geodata__cities.sql;
mysql: [Warning] Using a password on the command line interface can be insecure.

root@MySQL8:~# mysql -u root -p123123  geodata < /var/geodata__countries.sql;
mysql: [Warning] Using a password on the command line interface can be insecure.

root@MySQL8:~# mysql -u root -p123123  geodata < /var/geodata__regions.sql;
mysql: [Warning] Using a password on the command line interface can be insecure.

root@MySQL8:~# mysql -u root -p123123;
mysql> SHOW SCHEMAS;
+--------------------+
| Database           |
+--------------------+
| employees          |
| geodata            |
| information_schema |
| mysql              |
| performance_schema |
| phpmyadmin         |
| sys                |
+--------------------+
7 rows in set (0,00 sec)

mysql> USE geodata;

mysql> SHOW TABLES;
+-------------------+
| Tables_in_geodata |
+-------------------+
| _cities           |
| _countries        |
| _regions          |
+-------------------+

mysql> SELECT * FROM `_cities`;
+----+------------+-----------+-----------+-------------------------------+
| id | country_id | important | region_id | title                         |
+----+------------+-----------+-----------+-------------------------------+
|  1 |          1 |         1 |         2 | Москва                        |
|  2 |          2 |         1 |         3 | Киев                          |
|  3 |          3 |         1 |         5 | Минск                         |
| 64 |          1 |         0 |         1 | Санкт-Петербург               |
| 65 |          2 |         0 |         4 | Харьков                       |
| 66 |          3 |         0 |         6 | Гомель                        |
+----+------------+-----------+-----------+-------------------------------+
6 rows in set (0,00 sec)

mysql> SELECT * FROM `_countries`;
+----+--------------------+
| id | title              |
+----+--------------------+
|  3 | Беларусия          |
|  1 | РФ                 |
|  2 | Украина            |
+----+--------------------+
3 rows in set (0,00 sec)

mysql> SELECT * FROM `_regions`;
+----+------------+----------------------------+
| id | country_id | title                      |
+----+------------+----------------------------+
|  1 |          1 | Ленинградская              |
|  2 |          1 | Московская                 |
|  3 |          2 | Киевская                   |
|  4 |          2 | Харьковская                |
|  5 |          3 | Гомельская                 |
|  6 |          3 | Минская                    |
+----+------------+----------------------------+
6 rows in set (0,00 sec)


#Докум. на русском https://proselyte.net/tutorials/mongodb/introduction/
> mongo
> service mongod start
> service mongod restart
> mongo

> show dbs
admin     0.000GB
config    0.000GB
local     0.000GB
testtest  0.000GB

#Создание БД
> use geodata

#Создание коллекций
> db.createCollection("cities")
{ "ok" : 1 }
> db.createCollection("countries")
{ "ok" : 1 }
> db.createCollection("regions")
{ "ok" : 1 }

> show collections
cities
countries
regions

> db.cities.insert({"country_id":1, "important":1, "region_id":2, "title":"Москва"})
> db.cities.insert({"country_id":2, "important":1, "region_id":3, "title":"Киев"})
> db.cities.insert({"country_id":3, "important":1, "region_id":5, "title":"Минск"})
> db.cities.insert({"country_id":1, "important":0, "region_id":1, "title":"Санкт-Петербург"})
> db.cities.insert({"country_id":2, "important":0, "region_id":4, "title":"Харьков"})
> db.cities.insert({"country_id":3, "important":0, "region_id":6, "title":"Гомель"})

> db.cities.find().pretty()
{
  "_id" : ObjectId("5d08b239d3746e2398a7a016"),
  "country_id" : 1,
  "important" : 1,
  "region_id" : 2,
  "title" : "Москва"
}
{
  "_id" : ObjectId("5d08b240d3746e2398a7a017"),
  "country_id" : 2,
  "important" : 1,
  "region_id" : 3,
  "title" : "Киев"
}
{
  "_id" : ObjectId("5d08b240d3746e2398a7a018"),
  "country_id" : 3,
  "important" : 1,
  "region_id" : 5,
  "title" : "Минск"
}
{
  "_id" : ObjectId("5d08b240d3746e2398a7a019"),
  "country_id" : 1,
  "important" : 0,
  "region_id" : 1,
  "title" : "Санкт-Петербург"
}
{
  "_id" : ObjectId("5d08b240d3746e2398a7a01a"),
  "country_id" : 2,
  "important" : 0,
  "region_id" : 4,
  "title" : "Харьков"
}
{
  "_id" : ObjectId("5d08b243d3746e2398a7a01b"),
  "country_id" : 3,
  "important" : 0,
  "region_id" : 6,
  "title" : "Гомель"
}

> db.countries.insert({"id" : 3, "title" : "Беларусия"});
> db.countries.insert({"id" : 1, "title" : "РФ"});
> db.countries.insert({"id" : 2, "title" : "Украина"});

{ "_id" : ObjectId("5d08b2c5d3746e2398a7a01c"), "id" : 3, "title" : "Беларусия" }
{ "_id" : ObjectId("5d08b2c5d3746e2398a7a01d"), "id" : 1, "title" : "РФ" }
{ "_id" : ObjectId("5d08b2c5d3746e2398a7a01e"), "id" : 2, "title" : "Украина" }

> db.regions.insert({"id" : 1,"country_id" : 1, "title" : "Ленинградская"})
> db.regions.insert({"id" : 2,"country_id" : 1, "title" : "Московская"})
> db.regions.insert({"id" : 3,"country_id" : 2, "title" : "Киевская"})
> db.regions.insert({"id" : 4,"country_id" : 2, "title" : "Харьковская"})
> db.regions.insert({"id" : 5,"country_id" : 3, "title" : "Гомельская"})
> db.regions.insert({"id" : 6,"country_id" : 3, "title" : "Минская"})

> db.regions.find().pretty()
{
  "_id" : ObjectId("5d08b396d3746e2398a7a01f"),
  "id" : 1,
  "country_id" : 1,
  "title" : "Ленинградская"
}
{
  "_id" : ObjectId("5d08b396d3746e2398a7a020"),
  "id" : 2,
  "country_id" : 1,
  "title" : "Московская"
}
{
  "_id" : ObjectId("5d08b396d3746e2398a7a021"),
  "id" : 3,
  "country_id" : 2,
  "title" : "Киевская"
}
{
  "_id" : ObjectId("5d08b396d3746e2398a7a022"),
  "id" : 4,
  "country_id" : 2,
  "title" : "Харьковская"
}
{
  "_id" : ObjectId("5d08b396d3746e2398a7a023"),
  "id" : 5,
  "country_id" : 3,
  "title" : "Гомельская"
}
{
  "_id" : ObjectId("5d08b396d3746e2398a7a024"),
  "id" : 6,
  "country_id" : 3,
  "title" : "Минская"
}

> db.regions.find({"title" : "Минская"}).pretty()
{
  "_id" : ObjectId("5d08b396d3746e2398a7a024"),
  "id" : 6,
  "country_id" : 3,
  "title" : "Минская"
}


> db.dropDatabase()
{ "dropped" : "geodata", "ok" : 1 }
