
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html



# сначала нужно узнать ip-адрес виртуальной машины
root@MySQL8:~#	ip a
				inet 192.168.3.120/24 brd 192.168.3.255 scope global dynamic enp0s3

в основном конфигурационном файле на линукс ( /etc/mysql/my.cnf ) должна присутствовать строка:
!includedir /etc/mysql/conf.d/

в этой папке (/etc/mysql/conf.d/) можно создавать дополнительные файлы конфигурации с произвольными именами

или для windows
MySQL v5.7:
C:\ProgramData\MySQL\MySQL Server 5.7\my.ini
MySQL v8.0:
C:\Program Files\MySQL\MySQL Server 8.0\my.ini


https://dev.mysql.com/doc/refman/8.0/en/option-files.html


для windows дополнительные файлы создавать не нужно, правки вносят в основной конфигурационный файл, который может находиться в любой из указанных ниже директорий.
сила файлов в порядке убывания
Default options are read from the following files in the given order:
C:\WINDOWS\my.ini 
C:\WINDOWS\my.cnf 
C:\my.ini 
C:\my.cnf 
C:\Program Files\MySQL\MySQL Server 8.0\my.ini 
C:\Program Files\MySQL\MySQL Server 8.0\my.cnf


---


1) конфигурируем master

[mysqld]

# id сервера в рамках одного кластера строго уникален
server-id = 1

# bin log (имя файла произвольное)
log_bin = /var/log/mysql/bin.log

# bases (binlog_do_db - реплицируемые базы или binlog_ignore_db - игнорируемые)
#binlog_ignore_db = mysql, phpmyadmin, perfomance_schema
binlog_do_db = lesson3


после изменения конфига перезапустить сервер командой
service mysql restart


---


2) выполняем SQL-команды на мастере

root@MySQL8:~# mysql -u root -p
Enter password: ******

mysql> GRANT REPLICATION SLAVE ON *.* TO 'root'@'%';
Query OK, 0 rows affected (0,01 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0,02 sec)

mysql> SHOW MASTER STATUS;
+------------+----------+--------------+------------------+-------------------+
| File       | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------+----------+--------------+------------------+-------------------+
| bin.000024 |      538 | lesson3      |                  |                   |
+------------+----------+--------------+------------------+-------------------+
1 row in set (0,00 sec)

mysql> quit
Bye


---


3) не забывайте слить дамп нужной базы

root@MySQL8:~# mysqldump -u root -p123123 lesson3 --routines > /var/14062019.sql


---


4) конфигурируем slave

[mysqld]

# id сервера в рамках одного кластера строго уникален
server-id = 2

# bin log (имя файла как на мастере)
log_bin = log.bin

# базы для репликации (точно такие же как на мастере)
binlog_do_db = lesson_3

# relay log (имя файла произвольное)
relay-log = /var/log/mysql/relay.log


---


5) загружаем копию нужной базы на подчиненный сервер

root@MySQL8:~# mysql -u root -p123123 lesson2 --routines < /var/14062019.sql


---


6) выполняем SQL-команды на подчиненном сервере

root@MySQL8:~# mysql -u root -p123123

mysql> STOP SLAVE;
Query OK, 0 rows affected, 1 warning (0,00 sec)

mysql> RESET SLAVE;
Query OK, 0 rows affected (0,00 sec)

mysql> CHANGE MASTER TO MASTER_HOST='192.168.3.120', MASTER_USER='root', MASTER_PASSWORD='123123', MASTER_LOG_FILE='bin.000024', MASTER_LOG_POS=538;
Query OK, 0 rows affected, 2 warnings (0,50 sec)

mysql> START SLAVE;
Query OK, 0 rows affected (0,10 sec)

mysql> SHOW SLAVE STATUS \G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.3.120
                  Master_User: root
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: bin.000024
          Read_Master_Log_Pos: 538
               Relay_Log_File: MySQL8-relay-bin.000002
                Relay_Log_Pos: 316
        Relay_Master_Log_File: bin.000024
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 538
              Relay_Log_Space: 525
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 1
                  Master_UUID: 3a90a3b6-f1ab-11e8-8365-080027ad0e39
             Master_Info_File: mysql.slave_master_info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind: 
      Last_IO_Error_Timestamp: 
     Last_SQL_Error_Timestamp: 
               Master_SSL_Crl: 
           Master_SSL_Crlpath: 
           Retrieved_Gtid_Set: 
            Executed_Gtid_Set: 
                Auto_Position: 0
         Replicate_Rewrite_DB: 
                 Channel_Name: 
           Master_TLS_Version: 
       Master_public_key_path: 
        Get_master_public_key: 0
1 row in set (0,00 sec)


в результате выполнения команды не должно быть никаких ошибок


ошибка
Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.

лечится удалением файла 
/var/lib/mysql/auto.cnf

или (для windows)
C:\ProgramData\MySQL\MySQL Server 5.7\Data\auto.cnf
и перезапуском сервера

можно сделать это двумя командами в терминале:
mv /var/lib/mysql/auto.cnf /var/lib/mysql/auto.cnf.bak
service mysql restart


бывает что не меняется server_id подчиненного сервера (очевидно, какой-то глюк) можно поменять его командой
SET GLOBAL server_id=2;

проверить значение server_id можно командой 
SHOW VARIABLES LIKE 'server_id';

для проверки репликации можно посмотреть лог в папке 
/var/log/mysql/

в логе должно быть что-то подобное:
2019-23-04T18:28:20.906395Z 9 [System] [MY-010562] [Repl] Slave I/O thread for channel '': connected to master 'root@192.168.3.120:3306',replication started in log 'bin.000006' at position 155


---


7) проверяем репликацию

# на мастере (или на слейве) смотрим таблицу depart

root@MySQL8:~# mysql -u root -p123123

mysql> USE lesson3;
Database changed

mysql> SELECT * FROM `depart`;
+-----+-------------------------+-------+---------+
| id  | name                    | count | head_id |
+-----+-------------------------+-------+---------+
|   1 | Айти отдел              |     2 |    NULL |
|  10 | Маркетинг               |     1 |    NULL |
| 555 | Айти отдел              |     0 |    NULL |
| 556 | Бухгалтерия             |     0 |    NULL |
| 557 | Охрана                  |     0 |    NULL |
| 558 | Реклама                 |     0 |    NULL |
| 559 | Отдел кадров            |     0 |    NULL |
| 560 | Столовая                |     0 |    NULL |
+-----+-------------------------+-------+---------+
8 rows in set (0,00 sec)

# на мастере выполняем команду
mysql> INSERT INTO `depart` (`name`) VALUES ('Контроль кач-ва');
Query OK, 1 row affected (0,10 sec)


# снова на слейве смотрим таблицу depart
mysql> SELECT * FROM `lesson3`.`depart`;
+------+------------------------------+-------+---------+
| id   | name                         | count | head_id |
+------+------------------------------+-------+---------+
|    1 | Айти отдел                   |     2 |    NULL |
|   10 | Маркетинг                    |     1 |    NULL |
|  555 | Айти отдел                   |     0 |    NULL |
|  556 | Бухгалтерия                  |     0 |    NULL |
|  557 | Охрана                       |     0 |    NULL |
|  558 | Реклама                      |     0 |    NULL |
|  559 | Отдел кадров                 |     0 |    NULL |
|  560 | Столовая                     |     0 |    NULL |
| 1000 | Контроль кач-ва              |     0 |    NULL | <-- данные реплицировались!
+------+------------------------------+-------+---------+

теперь все операции на изменение данных выполняемые на мастере будут автоматически повторяться на слейве.


mysql> quit
Bye



--- MongoDB



root@MySQL8:~# mongo
exception: connect failed

root@MySQL8:~# service mongod start

root@MySQL8:~# mongo
MongoDB shell version v4.0.4

> show dbs
admin     0.000GB
config    0.000GB
local     0.000GB
testtest  0.000GB

> use june
switched to db june

> db.june.insert({"name":"Tapac"})
WriteResult({ "nInserted" : 1 })

> db.june.find()
{ "_id" : ObjectId("5d03f079096112de01224093"), "name" : "Tapac" }

> db.june.insert({"name":"Tapac", "lastname":"Gol", "dept":1, "salary":25000})
WriteResult({ "nInserted" : 1 })

> db.june.insert({"name":"Ant", "lastname":"Pol", "dept":1, "salary":35000})
WriteResult({ "nInserted" : 1 })

> db.june.insert({"name":"Evg", "lastname":"Vot", "dept":2, "salary":45000})
WriteResult({ "nInserted" : 1 })

> db.june.insert({"name":"Alena", "lastname":"Zv", "dept":2, "salary":55000})
WriteResult({ "nInserted" : 1 })

> db.june.insert({"name":"Vlad", "lastname":"Pit", "dept":1, "salary":65000, "position":"manager"})
WriteResult({ "nInserted" : 1 })

> db.june.insert({"name":"Andr", "lastname":"Urch", "dept":2, "salary":50000, "position":"accountant"})
WriteResult({ "nInserted" : 1 })

> db.june.insert({"name":"Olga", "lastname":"Ver", "dept":2, "salary":40000, "position":"accountant", "birthday":"25.06"})
WriteResult({ "nInserted" : 1 })

> db.june.find()
{ "_id" : ObjectId("5d03f079096112de01224093"), "name" : "Tapac" }
{ "_id" : ObjectId("5d03f0b9096112de01224094"), "name" : "Tapac", "lastname" : "Gol", "dept" : 1, "salary" : 25000 }
{ "_id" : ObjectId("5d03f0c8096112de01224095"), "name" : "Ant", "lastname" : "Pol", "dept" : 1, "salary" : 35000 }
{ "_id" : ObjectId("5d03f0d9096112de01224096"), "name" : "Evg", "lastname" : "Vot", "dept" : 2, "salary" : 45000 }
{ "_id" : ObjectId("5d03f0e4096112de01224097"), "name" : "Alena", "lastname" : "Zv", "dept" : 2, "salary" : 55000 }
{ "_id" : ObjectId("5d03f100096112de01224098"), "name" : "Vlad", "lastname" : "Pit", "dept" : 1, "salary" : 65000, "position" : "manager" }
{ "_id" : ObjectId("5d03f122096112de01224099"), "name" : "Andr", "lastname" : "Urch", "dept" : 2, "salary" : 50000, "position" : "accountant" }
{ "_id" : ObjectId("5d03f156096112de0122409a"), "name" : "Olga", "lastname" : "Ver", "dept" : 2, "salary" : 40000, "position" : "accountant", "birthday" : "25.06" }

> db.june.find().pretty()
{ "_id" : ObjectId("5d03f079096112de01224093"), "name" : "Tapac" }
{
	"_id" : ObjectId("5d03f0b9096112de01224094"),
	"name" : "Tapac",
	"lastname" : "Gol",
	"dept" : 1,
	"salary" : 25000
}
{
	"_id" : ObjectId("5d03f0c8096112de01224095"),
	"name" : "Ant",
	"lastname" : "Pol",
	"dept" : 1,
	"salary" : 35000
}
{
	"_id" : ObjectId("5d03f0d9096112de01224096"),
	"name" : "Evg",
	"lastname" : "Vot",
	"dept" : 2,
	"salary" : 45000
}
{
	"_id" : ObjectId("5d03f0e4096112de01224097"),
	"name" : "Alena",
	"lastname" : "Zv",
	"dept" : 2,
	"salary" : 55000
}
{
	"_id" : ObjectId("5d03f100096112de01224098"),
	"name" : "Vlad",
	"lastname" : "Pit",
	"dept" : 1,
	"salary" : 65000,
	"position" : "manager"
}
{
	"_id" : ObjectId("5d03f122096112de01224099"),
	"name" : "Andr",
	"lastname" : "Urch",
	"dept" : 2,
	"salary" : 50000,
	"position" : "accountant"
}
{
	"_id" : ObjectId("5d03f156096112de0122409a"),
	"name" : "Olga",
	"lastname" : "Ver",
	"dept" : 2,
	"salary" : 40000,
	"position" : "accountant",
	"birthday" : "25.06"
}

> db.june.find({"name" : "Tapac"})
{ "_id" : ObjectId("5d03f079096112de01224093"), "name" : "Tapac" }
{ "_id" : ObjectId("5d03f0b9096112de01224094"), "name" : "Tapac", "lastname" : "Gol", "dept" : 1, "salary" : 25000 }

> db.june.find({"position":{$exists:true}})
{ "_id" : ObjectId("5d03f100096112de01224098"), "name" : "Vlad", "lastname" : "Pit", "dept" : 1, "salary" : 65000, "position" : "manager" }
{ "_id" : ObjectId("5d03f122096112de01224099"), "name" : "Andr", "lastname" : "Urch", "dept" : 2, "salary" : 50000, "position" : "accountant" }
{ "_id" : ObjectId("5d03f156096112de0122409a"), "name" : "Olga", "lastname" : "Ver", "dept" : 2, "salary" : 40000, "position" : "accountant", "birthday" : "25.06" }

> db.june.find({"position":{$exists:false}})
{ "_id" : ObjectId("5d03f079096112de01224093"), "name" : "Tapac" }
{ "_id" : ObjectId("5d03f0b9096112de01224094"), "name" : "Tapac", "lastname" : "Gol", "dept" : 1, "salary" : 25000 }
{ "_id" : ObjectId("5d03f0c8096112de01224095"), "name" : "Ant", "lastname" : "Pol", "dept" : 1, "salary" : 35000 }
{ "_id" : ObjectId("5d03f0d9096112de01224096"), "name" : "Evg", "lastname" : "Vot", "dept" : 2, "salary" : 45000 }
{ "_id" : ObjectId("5d03f0e4096112de01224097"), "name" : "Alena", "lastname" : "Zv", "dept" : 2, "salary" : 55000 }

> db.june.find({"_id" : ObjectId("5d03f0d9096112de01224096")})
{ "_id" : ObjectId("5d03f0d9096112de01224096"), "name" : "Evg", "lastname" : "Vot", "dept" : 2, "salary" : 45000 }

> db.june.find({"salary":{$in:[25000,30000,45000,40000,77000,50000]}})
{ "_id" : ObjectId("5d03f0b9096112de01224094"), "name" : "Tapac", "lastname" : "Gol", "dept" : 1, "salary" : 25000 }
{ "_id" : ObjectId("5d03f0d9096112de01224096"), "name" : "Evg", "lastname" : "Vot", "dept" : 2, "salary" : 45000 }
{ "_id" : ObjectId("5d03f122096112de01224099"), "name" : "Andr", "lastname" : "Urch", "dept" : 2, "salary" : 50000, "position" : "accountant" }
{ "_id" : ObjectId("5d03f156096112de0122409a"), "name" : "Olga", "lastname" : "Ver", "dept" : 2, "salary" : 40000, "position" : "accountant", "birthday" : "25.06" }

> db.june.find({"salary":{$lt:40000}})
{ "_id" : ObjectId("5d03f0b9096112de01224094"), "name" : "Tapac", "lastname" : "Gol", "dept" : 1, "salary" : 25000 }
{ "_id" : ObjectId("5d03f0c8096112de01224095"), "name" : "Ant", "lastname" : "Pol", "dept" : 1, "salary" : 35000 }

> db.june.find({"salary":{$gt:60000}})
{ "_id" : ObjectId("5d03f100096112de01224098"), "name" : "Vlad", "lastname" : "Pit", "dept" : 1, "salary" : 65000, "position" : "manager" }

> db.june.find({"name":{$regex:"^A"}})
{ "_id" : ObjectId("5d03f0c8096112de01224095"), "name" : "Ant", "lastname" : "Pol", "dept" : 1, "salary" : 35000 }
{ "_id" : ObjectId("5d03f0e4096112de01224097"), "name" : "Alena", "lastname" : "Zv", "dept" : 2, "salary" : 55000 }
{ "_id" : ObjectId("5d03f122096112de01224099"), "name" : "Andr", "lastname" : "Urch", "dept" : 2, "salary" : 50000, "position" : "accountant" }

> db.june.update({"name":"Alena"},{$set:{"salary":60000}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> db.june.update({"name":"Alena"},{$set:{"salary":62000, "head":1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> db.june.find({"name":"Alena"})
{ "_id" : ObjectId("5d03f0e4096112de01224097"), "name" : "Alena", "lastname" : "Zv", "dept" : 2, "salary" : 62000, "head" : 1 }

> db.june.update({"name":"Alena"},{$unset:{"head":1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> db.june.find({"name":"Alena"})
{ "_id" : ObjectId("5d03f0e4096112de01224097"), "name" : "Alena", "lastname" : "Zv", "dept" : 2, "salary" : 62000 }

> db.june.remove({"_id" : ObjectId("5d03f0d9096112de01224096")})
WriteResult({ "nRemoved" : 1 })
 
> db.june.find()
{ "_id" : ObjectId("5d03f079096112de01224093"), "name" : "Tapac" }
{ "_id" : ObjectId("5d03f0b9096112de01224094"), "name" : "Tapac", "lastname" : "Gol", "dept" : 1, "salary" : 25000 }
{ "_id" : ObjectId("5d03f0c8096112de01224095"), "name" : "Ant", "lastname" : "Pol", "dept" : 1, "salary" : 35000 }
{ "_id" : ObjectId("5d03f0e4096112de01224097"), "name" : "Alena", "lastname" : "Zv", "dept" : 2, "salary" : 62000 }
{ "_id" : ObjectId("5d03f100096112de01224098"), "name" : "Vlad", "lastname" : "Pit", "dept" : 1, "salary" : 65000, "position" : "manager" }
{ "_id" : ObjectId("5d03f122096112de01224099"), "name" : "Andr", "lastname" : "Urch", "dept" : 2, "salary" : 50000, "position" : "accountant" }
{ "_id" : ObjectId("5d03f156096112de0122409a"), "name" : "Olga", "lastname" : "Ver", "dept" : 2, "salary" : 40000, "position" : "accountant", "birthday" : "25.06" }

> db.june.drop()
true

> show dbs
admin     0.000GB
config    0.000GB
local     0.000GB
testtest  0.000GB


---


# скачать MongoDB
https://www.mongodb.com/download-center/community

# репликация MongoDB
https://docs.mongodb.com/manual/replication/

# транзакции MongoDB
https://docs.mongodb.com/master/core/transactions/

# зависимости в MongoDB
https://docs.mongodb.com/v4.0/reference/database-references/