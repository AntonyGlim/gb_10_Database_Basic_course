# выбираем БД lesson3
USE `lesson3`;

# создаем простое представление
CREATE VIEW `allshtat` AS
SELECT * FROM `shtat`;

# делаем выборку как из обычной таблицы
SELECT `name` FROM `allshtat` WHERE `dept` = 1;

# удаляем представление
DROP VIEW IF EXISTS `allinfo`;


---


# создаем функцию которая находит id менеджера по имени и фамилии
CREATE FUNCTION `find`(s_name VARCHAR(25), s_lastname VARCHAR(30))
RETURNS INT
READS SQL DATA
RETURN (SELECT `id` FROM `shtat` 
WHERE `position`='Главный' AND `name`= s_name AND `lastname`= s_lastname);

# проверяем функцию
SELECT `find`('Владимир', 'Питерский')

# выводим всю инфорацию о сотруднике
SELECT * FROM `shtat` WHERE `id` = (SELECT `find`('Владимир', 'Питерский'));

# то же самое без функции работает медленнее
SELECT * FROM `shtat` WHERE `position`='Главный' AND `name`='Владимир' AND `lastname`='Питерский';


---


# создаем процедуру которая находит id менеджера по имени и фамилии
CREATE PROCEDURE `find`(s_name VARCHAR(25), s_lastname VARCHAR(30))
READS SQL DATA
SELECT * FROM `shtat` 
WHERE `position`='Главный' AND `name`= s_name AND `lastname`= s_lastname;

# проверяем процедуру
CALL `find`('Владимир', 'Питерский');


---


# так можно создать полную структурную копию таблицы dates, но это сейчас не нужно
CREATE TABLE IF NOT EXISTS `salary` LIKE `dates`;

# смотрим скрипт создания таблицы dates
SHOW CREATE TABLE `dates`;

# создаем таблицу salary на сонове этого скрипта (экономим время)
CREATE TABLE `salary` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `emp_id` int(11) NOT NULL,
  `date` date DEFAULT NULL,
  `payoff` INT,
  `comment` TEXT,
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


# создаем триггер который выплачивает половину зп каждому новому сотруднику
delimiter $$
CREATE TRIGGER `bonus` 
AFTER INSERT ON `shtat`
FOR EACH ROW
BEGIN
INSERT INTO `salary` (`emp_id`,`date`,`payoff`,`comment`) VALUES (NEW.id, CURDATE(), NEW.salary/2, 'вступительный бонус');
UPDATE `depart` SET `count` = `count`+1 WHERE `depart`.`id` = NEW.dept;
END$$
delimiter ;


# вставляем в таблицу shtat сразу несколько строк для проверки триггера
INSERT INTO `shtat` 
(`name`,`lastname`,`dept`,`salary`) VALUES 
('Антон','Полонников',1,25000),
('Ирина','Кенина',1,45000),
('Артур','Большаков',10,55000);

# смотрим таблицу salary
SELECT * FROM `salary`;
+----+--------+------------+--------+---------------------------------------+
| id | emp_id | date       | payoff | comment                               |
+----+--------+------------+--------+---------------------------------------+
|  1 |     10 | 2019-06-11 |  12500 | вступительный бонус                   |
|  2 |     11 | 2019-06-11 |  22500 | вступительный бонус                   |
|  3 |     12 | 2019-06-11 |  27500 | вступительный бонус                   |
+----+--------+------------+--------+---------------------------------------+
3 rows in set (0,00 sec)



---



# заходим в первую консоль
root@MySQL8:~# mysql -u root -p123123

# смотрим какие есть схемы
mysql> SHOW SCHEMAS;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| lesson1            |
| lesson2            |
| lesson3            |
| mysql              |
| performance_schema |
| phpmyadmin         |
| sys                |
+--------------------+
8 rows in set (0,01 sec)

# выбираем БД lesson3
mysql> USE lesson3;
Database changed

# смотрим какие есть таблицы
mysql> SHOW TABLES;
+-------------------+
| Tables_in_lesson3 |
+-------------------+
| allinfo           |
| dates             |
| depart            |
| salary            |
| shtat             |
+-------------------+
7 rows in set (0,00 sec)

# смотрим таблицу shtat
mysql> SELECT * FROM `shtat`;
+----+------------------+----------------------+------+------------------------+--------+
| id | name             | lastname             | dept | position               | salary |
+----+------------------+----------------------+------+------------------------+--------+
|  2 | Алена            | Звягинцева           |   10 | NULL                   |  35000 |
|  3 | Ирина            | Кенина               |    1 | NULL                   |  45000 |
|  6 | Владимир         | Питерский            |  777 | Главный                |  40000 |
|  9 | Евгений          | Полянский            |  556 | Тестировщик            |  50000 |
| 10 | Антон            | Полонников           |    1 | NULL                   |  25000 |
| 11 | Ирина            | Кенина               |    1 | NULL                   |  45000 |
| 12 | Артур            | Большаков            |   10 | NULL                   |  55000 |
+----+------------------+----------------------+------+------------------------+--------+
7 rows in set (0,00 sec)

# блокируем все операции кроме чтения в табл shtat
mysql> LOCK TABLE `shtat` READ;
Query OK, 0 rows affected (0,00 sec)


	# заходим во вторую консоль
	root@MySQL8:~# mysql -u root -p
	Enter password: ******
	
	# выбираем БД lesson3
	mysql> USE lesson3;
	Database changed
	
	## после того как заблокировали таблицу shtat читать из нее можно а изменять её нельзя

	# смотрим таблицу shtat
	mysql> SELECT * FROM `shtat`
	    ->
	    ->
	    -> ;
	+----+------------------+----------------------+------+------------------------+--------+
	| id | name             | lastname             | dept | position               | salary |
	+----+------------------+----------------------+------+------------------------+--------+
	|  2 | Алена            | Звягинцева           |   10 | NULL                   |  35000 |
	|  3 | Ирина            | Кенина               |    1 | NULL                   |  45000 |
	|  6 | Владимир         | Питерский            |  777 | Главный                |  40000 |
	|  9 | Евгений          | Полянский            |  556 | Тестировщик            |  50000 |
	| 10 | Антон            | Полонников           |    1 | NULL                   |  25000 |
	| 11 | Ирина            | Кенина               |    1 | NULL                   |  45000 |
	| 12 | Артур            | Большаков            |   10 | NULL                   |  55000 |
	+----+------------------+----------------------+------+------------------------+--------+
	7 rows in set (0,00 sec)
	
	
	mysql> DELETE FROM `shtat` WHERE `id` = 11;
	# удаление не происходит, команда DELETE послана на сервер, но она не выполняется


# возвращаемся в первую консоль и разблокируем таблицы
mysql> UNLOCK TABLES;
Query OK, 0 rows affected (0,01 sec)


	mysql> DELETE FROM `shtat` WHERE `id` = 11;
	Query OK, 1 row affected (57,06 sec) 	# удаление во второй консоли происходит только после разблокировки таблицы из первой
	
# снова смотрим таблицу shtat 
mysql> mysql> SELECT * FROM `shtat`;
+----+------------------+----------------------+------+------------------------+--------+
| id | name             | lastname             | dept | position               | salary |
+----+------------------+----------------------+------+------------------------+--------+
|  2 | Алена            | Звягинцева           |   10 | NULL                   |  35000 |
|  3 | Ирина            | Кенина               |    1 | NULL                   |  45000 |
|  6 | Владимир         | Питерский            |  777 | Главный                |  40000 |
|  9 | Евгений          | Полянский            |  556 | Тестировщик            |  50000 |
| 10 | Антон            | Полонников           |    1 | NULL                   |  25000 |
| 12 | Артур            | Большаков            |   10 | NULL                   |  55000 |
+----+------------------+----------------------+------+------------------------+--------+
6 rows in set (0,01 sec)



---


# находим точное название переменной autocommit
SHOW VARIABLES LIKE 'autocommit';

# выключаем автокоммиты
SET AUTOCOMMIT = 0;


# находим точное название переменной transaction_isolation
SHOW VARIABLES LIKE '%transaction%';

# выставляем нужный уровень изоляций
SET transaction_isolation = SERIALIZABLE;


# создаем транзакцию которая доплачивает бонус сотруднику с мин зп до средней
BEGIN;
SET @avg_zp := (SELECT AVG(`salary`) FROM `shtat`);
SET @min_zp := (SELECT MIN(`salary`) FROM `shtat`);
SET @minzp_empid := (SELECT `id` FROM `shtat` WHERE `salary` = @min_zp);
INSERT INTO `salary` (`emp_id`, `date`,`payoff`,`comment`) VALUES
(@minzp_empid, CURDATE(), @avg_zp - @min_zp, 'доплата до среднего');
COMMIT;



---



# анализируем таблицу
EXPLAIN `shtat`;


# смотрим информацию об индексах в таблице shtat
SHOW INDEX FROM `shtat`;


# анализируем простой запрос
mysql> EXPLAIN SELECT `name`, `lastname` FROM `shtat` WHERE `id` = 10;
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | shtat | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
1 row in set, 1 warning (0,00 sec)


# запросы с функциями агрегаторами всегда 100% кпд т.к. берутся все строки для их выполнения
mysql> EXPLAIN SELECT MAX(`salary`) FROM `shtat`;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
|  1 | SIMPLE      | shtat | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    6 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
1 row in set, 1 warning (0,01 sec)


mysql> SELECT MAX(`salary`) FROM `shtat`;
+---------------+
| MAX(`salary`) |
+---------------+
|         55000 |
+---------------+
1 row in set (0,00 sec)


mysql> SELECT `salary` FROM `shtat` ORDER BY `salary` DESC LIMIT 1;
+--------+
| salary |
+--------+
|  55000 |
+--------+
1 row in set (0,00 sec)


# тут 100% кпд потому что нет условия WHERE
mysql> EXPLAIN SELECT `salary` FROM `shtat` ORDER BY `salary` DESC LIMIT 1;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
|  1 | SIMPLE      | shtat | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    6 |   100.00 | Using filesort |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
1 row in set, 1 warning (0,00 sec)


# анализируем запрос с поиском по имени
mysql>  EXPLAIN SELECT `name`, `lastname` FROM `shtat` WHERE `name` = 'Антон';
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | shtat | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    6 |    16.67 | Using where |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0,00 sec)


# КПД неприлично низкий (16.67%), ускорить выполнение запроса поможет составной индекс
CREATE INDEX `fullname` ON `shtat`(`name`,`lastname`);
Query OK, 0 rows affected (20,07 sec)
Records: 0  Duplicates: 0  Warnings: 0


# снова анализируем запрос с поиском по имени (по имени 100% КПД)
mysql>  EXPLAIN SELECT `name`, `lastname` FROM `shtat` WHERE `name` = 'Антон';
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+
|  1 | SIMPLE      | shtat | NULL       | ref  | fullname      | fullname | 102     | const |    1 |   100.00 | Using index |
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+
1 row in set, 1 warning (0,00 sec)



# немного информации об индексах в запросах
https://dev.mysql.com/doc/refman/8.0/en/index-hints.html

# немного информации о переменных в mysql
https://dev.mysql.com/doc/refman/8.0/en/sql-syntax-prepared-statements.html