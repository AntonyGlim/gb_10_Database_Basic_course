#1. Создать VIEW на основе запросов, которые вы сделали в ДЗ к уроку 3.

#1.1 Представление для "1. Выбрать среднюю зарплату по отделам.";
CREATE VIEW `avg_salary_group_by_depart` AS
SELECT 
  `depart`.`name` AS `Отдел`, 
  AVG(`salary`) AS `Средняя зарплата`
FROM `shtat` 
LEFT JOIN `depart` 
  ON `shtat`.`dept` = `depart`.`id`
GROUP BY `dept`;

#1.2 Представление для "2. Выбрать максимальную зарплату у сотрудника."
CREATE VIEW `max_salary_in_shtat` AS
SELECT
  `name`, 
  `salary`
FROM `shtat`
WHERE 
  `salary` = (SELECT MAX(`salary`) FROM `shtat`);

#1.3 Представление для "3. Удалить одного сотрудника, у которого максимальная зарплата."
#Данный код не отработал. Error Code: 1064. You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near...
CREATE VIEW `delete_with_max_salary` AS
DELETE FROM `shtat` 

  WHERE id = (
  SELECT * FROM (
    SELECT id FROM `shtat` WHERE `salary` = (
        SELECT MAX(`salary`) FROM `shtat`
    )
  ) AS `tmp`)
;

#1.4 Представление для "4. Посчитать количество сотрудников во всех отделах."
CREATE VIEW `number_of_employees` AS
SELECT 
  COUNT(*) AS `Количество сотрудников`, 
  `depart`.`name` AS `Отдел` 
FROM `shtat` 
LEFT JOIN `depart` 
  ON `shtat`.`dept` = `depart`.`id`
GROUP BY `dept`;

#1.5 Представление для "5. Найти количество сотрудников в отделах и посмотреть, сколько всего денег получает отдел."
CREATE VIEW `number_of_employees_and_salary_sum` AS
SELECT 
  COUNT(*) AS `Кол-во сот-ов`, 
  `depart`.`name` AS `Отдел`,
  SUM(`salary`) AS `Сумма зп`
FROM `shtat` 
LEFT JOIN `depart` 
  ON `shtat`.`dept` = `depart`.`id`
GROUP BY `dept`;


#2. Создать функцию, которая найдет менеджера по имени и фамилии.

delimiter //
CREATE PROCEDURE select_by_first_an_last_name (
  emp_name VARCHAR(32), 
  last_name VARCHAR(32))
BEGIN
  SET @emp_id := (
    SELECT `id` FROM `shtat`
      WHERE `name` = emp_name AND `lastname` = last_name
  );
    SELECT * FROM `shtat`
      WHERE `id` = @emp_id;
END//
delimiter ;

CALL `select_by_first_an_last_name` ('Владимир', 'Питерский');

CREATE FUNCTION `select_id_by_first_an_last_name`(
  emp_name VARCHAR(32), 
  last_name VARCHAR(32))
RETURNS INT DETERMINISTIC
READS SQL DATA
RETURN (SELECT `id` FROM `shtat` WHERE `name` = emp_name AND `lastname` = last_name);

SELECT `select_id_by_first_an_last_name` ('Владимир', 'Питерский');


#3. Создать триггер, который при добавлении нового сотрудника 
#будет выплачивать ему вступительный бонус, занося запись об этом в таблицу salary.

#Талицы нет, создадим ее
CREATE TABLE `employees`.`salary` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `employe_id` INT NOT NULL,
  `salary_bonus` INT NOT NULL,
  PRIMARY KEY (`id`));

CREATE TRIGGER `salary_bonus`
AFTER INSERT ON `employees`.`shtat`
FOR EACH ROW 
INSERT INTO `employees`.`salary` (
  `employe_id`, 
  `salary_bonus`) 
VALUES (NEW.id, 15000);

#Проверим корректность
INSERT INTO `shtat` 
(`name`,`lastname`,`dept`,`salary`,`position`) VALUES 
('Анатолий','Башлыков',1,30000,'Программист');

SELECT * FROM `employees`.`salary`;
SELECT * FROM `employees`.`shtat`;